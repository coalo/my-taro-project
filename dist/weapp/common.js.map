{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;;AAEA;AACA;AAAA;AACA;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;;AAEA;;AAIA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AC1BA;AACA;AACA;;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;AC/JA;AACA;AACA;;AAEA;AAEA;AACA;AAWA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAHA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;ACjKA;AACA;AACA;;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAPA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAPA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AANA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AANA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAFA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA","sources":["webpack://naixue-test/._src_constants_api.ts","webpack://naixue-test/._src_store_index.ts","webpack://naixue-test/._src_store_slices_cartSlice.ts","webpack://naixue-test/._src_store_slices_userSlice.ts","webpack://naixue-test/._src_utils_storage.ts"],"sourcesContent":["/**\n * API 地址配置\n */\n\n// API 基础地址\nexport const BASE_URL = process.env.NODE_ENV === 'production'\n  ? 'https://api.naixue.com'\n  : 'https://api-dev.naixue.com'\n\n// API 端点\nexport const API = {\n  // 用户相关\n  LOGIN: '/api/user/login', // 登录\n  REGISTER: '/api/user/register', // 注册\n  GET_USER_INFO: '/api/user/info', // 获取用户信息\n  UPDATE_USER_INFO: '/api/user/update', // 更新用户信息\n  GET_ADDRESSES: '/api/user/addresses', // 获取地址列表\n  ADD_ADDRESS: '/api/user/address/add', // 添加地址\n  UPDATE_ADDRESS: '/api/user/address/update', // 更新地址\n  DELETE_ADDRESS: '/api/user/address/delete', // 删除地址\n  GET_COUPONS: '/api/user/coupons', // 获取优惠券列表\n  GET_POINTS: '/api/user/points', // 获取积分记录\n\n  // 商品相关\n  GET_BANNERS: '/api/product/banners', // 获取轮播图\n  GET_CATEGORIES: '/api/product/categories', // 获取分类列表\n  GET_PRODUCTS: '/api/product/list', // 获取商品列表\n  GET_PRODUCT_DETAIL: '/api/product/detail', // 获取商品详情\n  SEARCH_PRODUCTS: '/api/product/search', // 搜索商品\n  GET_RECOMMENDED: '/api/product/recommended', // 获取推荐商品\n\n  // 购物车相关\n  GET_CART: '/api/cart/list', // 获取购物车\n  ADD_TO_CART: '/api/cart/add', // 加入购物车\n  UPDATE_CART: '/api/cart/update', // 更新购物车\n  DELETE_CART: '/api/cart/delete', // 删除购物车商品\n  CLEAR_CART: '/api/cart/clear', // 清空购物车\n\n  // 订单相关\n  CREATE_ORDER: '/api/order/create', // 创建订单\n  GET_ORDERS: '/api/order/list', // 获取订单列表\n  GET_ORDER_DETAIL: '/api/order/detail', // 获取订单详情\n  CANCEL_ORDER: '/api/order/cancel', // 取消订单\n  GET_ORDER_STATS: '/api/order/stats', // 获取订单统计\n\n  // 支付相关\n  CREATE_PAYMENT: '/api/payment/create', // 创建支付\n  QUERY_PAYMENT: '/api/payment/query', // 查询支付状态\n\n  // 文件上传\n  UPLOAD: '/api/upload'\n}\n\n// 请求超时时间（毫秒）\nexport const TIMEOUT = 10000\n\n// TOKEN 存储 key\nexport const TOKEN_KEY = 'naixue_token'\n\n// 分页默认配置\nexport const PAGE_SIZE = 20\n","/**\n * Redux Store 配置\n */\n\nimport { configureStore } from '@reduxjs/toolkit'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport userReducer from './slices/userSlice'\nimport cartReducer from './slices/cartSlice'\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    cart: cartReducer\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false\n    })\n})\n\n// 导出类型\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\n// 导出 hooks\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","/**\n * 购物车状态管理\n */\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { CartItem, SelectedSpec } from '../../types/product'\n\ninterface CartState {\n  items: CartItem[]\n  totalCount: number\n  totalPrice: number\n  checkedAll: boolean\n}\n\nconst initialState: CartState = {\n  items: [],\n  totalCount: 0,\n  totalPrice: 0,\n  checkedAll: false\n}\n\n// 计算总数和总价\nconst calculateTotal = (items: CartItem[]) => {\n  const checkedItems = items.filter(item => item.checked)\n  const totalCount = checkedItems.reduce((sum, item) => sum + item.quantity, 0)\n  const totalPrice = checkedItems.reduce((sum, item) => {\n    const specsPrice = item.specs.reduce((s, spec) => s + spec.price, 0)\n    return sum + (item.price + specsPrice) * item.quantity\n  }, 0)\n  return { totalCount, totalPrice }\n}\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    // 添加到购物车\n    addToCart: (state, action: PayloadAction<{\n      productId: string\n      name: string\n      coverImage: string\n      price: number\n      specs: SelectedSpec[]\n    }>) => {\n      const { productId, specs } = action.payload\n      \n      // 检查是否已存在相同商品和规格\n      const existingIndex = state.items.findIndex(item => {\n        if (item.productId !== productId) return false\n        if (item.specs.length !== specs.length) return false\n        return item.specs.every((spec, index) => \n          spec.optionId === specs[index].optionId\n        )\n      })\n      \n      if (existingIndex !== -1) {\n        // 已存在，数量+1\n        state.items[existingIndex].quantity += 1\n      } else {\n        // 不存在，添加新项\n        state.items.push({\n          id: `${productId}_${Date.now()}`,\n          ...action.payload,\n          quantity: 1,\n          checked: true\n        })\n      }\n      \n      const { totalCount, totalPrice } = calculateTotal(state.items)\n      state.totalCount = totalCount\n      state.totalPrice = totalPrice\n      state.checkedAll = state.items.every(item => item.checked)\n    },\n    \n    // 更新数量\n    updateQuantity: (state, action: PayloadAction<{ id: string; quantity: number }>) => {\n      const item = state.items.find(i => i.id === action.payload.id)\n      if (item) {\n        item.quantity = Math.max(1, action.payload.quantity)\n      }\n      \n      const { totalCount, totalPrice } = calculateTotal(state.items)\n      state.totalCount = totalCount\n      state.totalPrice = totalPrice\n    },\n    \n    // 删除商品\n    removeFromCart: (state, action: PayloadAction<string>) => {\n      state.items = state.items.filter(item => item.id !== action.payload)\n      \n      const { totalCount, totalPrice } = calculateTotal(state.items)\n      state.totalCount = totalCount\n      state.totalPrice = totalPrice\n      state.checkedAll = state.items.length > 0 && state.items.every(item => item.checked)\n    },\n    \n    // 切换选中状态\n    toggleChecked: (state, action: PayloadAction<string>) => {\n      const item = state.items.find(i => i.id === action.payload)\n      if (item) {\n        item.checked = !item.checked\n      }\n      \n      const { totalCount, totalPrice } = calculateTotal(state.items)\n      state.totalCount = totalCount\n      state.totalPrice = totalPrice\n      state.checkedAll = state.items.every(item => item.checked)\n    },\n    \n    // 全选/取消全选\n    toggleCheckAll: (state) => {\n      state.checkedAll = !state.checkedAll\n      state.items.forEach(item => {\n        item.checked = state.checkedAll\n      })\n      \n      const { totalCount, totalPrice } = calculateTotal(state.items)\n      state.totalCount = totalCount\n      state.totalPrice = totalPrice\n    },\n    \n    // 清空购物车\n    clearCart: (state) => {\n      state.items = []\n      state.totalCount = 0\n      state.totalPrice = 0\n      state.checkedAll = false\n    },\n    \n    // 删除已选商品\n    removeCheckedItems: (state) => {\n      state.items = state.items.filter(item => !item.checked)\n      state.totalCount = 0\n      state.totalPrice = 0\n      state.checkedAll = false\n    },\n    \n    // 设置购物车数据（从服务器同步）\n    setCartItems: (state, action: PayloadAction<CartItem[]>) => {\n      state.items = action.payload\n      const { totalCount, totalPrice } = calculateTotal(state.items)\n      state.totalCount = totalCount\n      state.totalPrice = totalPrice\n      state.checkedAll = state.items.length > 0 && state.items.every(item => item.checked)\n    }\n  }\n})\n\nexport const {\n  addToCart,\n  updateQuantity,\n  removeFromCart,\n  toggleChecked,\n  toggleCheckAll,\n  clearCart,\n  removeCheckedItems,\n  setCartItems\n} = cartSlice.actions\n\nexport default cartSlice.reducer\n","/**\n * 用户状态管理\n */\n\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'\nimport { UserInfo, Address, Coupon } from '../../types/user'\nimport storage from '../../utils/storage'\nimport { TOKEN_KEY } from '../../constants/api'\n\ninterface UserState {\n  token: string | null\n  userInfo: UserInfo | null\n  isLogin: boolean\n  addresses: Address[]\n  coupons: Coupon[]\n  loading: boolean\n}\n\nconst initialState: UserState = {\n  token: null, // RN 不支持同步读取，需要在 app 启动时异步加载\n  userInfo: null,\n  isLogin: false,\n  addresses: [],\n  coupons: [],\n  loading: false\n}\n\n// 异步 actions\nexport const login = createAsyncThunk(\n  'user/login',\n  async (params: { phone: string; code: string }) => {\n    // TODO: 调用登录 API\n    const response = await fetch('/api/user/login', {\n      method: 'POST',\n      body: JSON.stringify(params)\n    })\n    return response.json()\n  }\n)\n\nexport const getUserInfo = createAsyncThunk(\n  'user/getUserInfo',\n  async () => {\n    // TODO: 调用获取用户信息 API\n    const response = await fetch('/api/user/info')\n    return response.json()\n  }\n)\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    // 设置 token\n    setToken: (state, action: PayloadAction<string>) => {\n      state.token = action.payload\n      state.isLogin = !!action.payload\n      storage.set(TOKEN_KEY, action.payload)\n    },\n    \n    // 设置用户信息\n    setUserInfo: (state, action: PayloadAction<UserInfo>) => {\n      state.userInfo = action.payload\n    },\n    \n    // 退出登录\n    logout: (state) => {\n      state.token = null\n      state.userInfo = null\n      state.isLogin = false\n      state.addresses = []\n      state.coupons = []\n      storage.remove(TOKEN_KEY)\n    },\n    \n    // 设置地址列表\n    setAddresses: (state, action: PayloadAction<Address[]>) => {\n      state.addresses = action.payload\n    },\n    \n    // 添加地址\n    addAddress: (state, action: PayloadAction<Address>) => {\n      state.addresses.push(action.payload)\n    },\n    \n    // 更新地址\n    updateAddress: (state, action: PayloadAction<Address>) => {\n      const index = state.addresses.findIndex(addr => addr.id === action.payload.id)\n      if (index !== -1) {\n        state.addresses[index] = action.payload\n      }\n    },\n    \n    // 删除地址\n    deleteAddress: (state, action: PayloadAction<string>) => {\n      state.addresses = state.addresses.filter(addr => addr.id !== action.payload)\n    },\n    \n    // 设置默认地址\n    setDefaultAddress: (state, action: PayloadAction<string>) => {\n      state.addresses.forEach(addr => {\n        addr.isDefault = addr.id === action.payload\n      })\n    },\n    \n    // 设置优惠券列表\n    setCoupons: (state, action: PayloadAction<Coupon[]>) => {\n      state.coupons = action.payload\n    },\n    \n    // 更新用户积分\n    updatePoints: (state, action: PayloadAction<number>) => {\n      if (state.userInfo) {\n        state.userInfo.points = action.payload\n      }\n    }\n  },\n  \n  extraReducers: (builder) => {\n    // 登录\n    builder.addCase(login.pending, (state) => {\n      state.loading = true\n    })\n    builder.addCase(login.fulfilled, (state, action) => {\n      state.loading = false\n      state.token = action.payload.token\n      state.userInfo = action.payload.userInfo\n      state.isLogin = true\n      storage.set(TOKEN_KEY, action.payload.token)\n    })\n    builder.addCase(login.rejected, (state) => {\n      state.loading = false\n    })\n    \n    // 获取用户信息\n    builder.addCase(getUserInfo.pending, (state) => {\n      state.loading = true\n    })\n    builder.addCase(getUserInfo.fulfilled, (state, action) => {\n      state.loading = false\n      state.userInfo = action.payload\n    })\n    builder.addCase(getUserInfo.rejected, (state) => {\n      state.loading = false\n    })\n  }\n})\n\nexport const {\n  setToken,\n  setUserInfo,\n  logout,\n  setAddresses,\n  addAddress,\n  updateAddress,\n  deleteAddress,\n  setDefaultAddress,\n  setCoupons,\n  updatePoints\n} = userSlice.actions\n\nexport default userSlice.reducer\n","/**\n * 本地存储工具\n */\n\nimport Taro from '@tarojs/taro'\n\nclass Storage {\n  /**\n   * 存储数据\n   */\n  set(key: string, data: any): void {\n    try {\n      const value = JSON.stringify(data)\n      Taro.setStorageSync(key, value)\n    } catch (error) {\n      console.error('存储数据失败', key, error)\n    }\n  }\n\n  /**\n   * 获取数据\n   */\n  get<T = any>(key: string): T | null {\n    try {\n      const value = Taro.getStorageSync(key)\n      return value ? JSON.parse(value) : null\n    } catch (error) {\n      console.error('获取数据失败', key, error)\n      return null\n    }\n  }\n\n  /**\n   * 删除数据\n   */\n  remove(key: string): void {\n    try {\n      Taro.removeStorageSync(key)\n    } catch (error) {\n      console.error('删除数据失败', key, error)\n    }\n  }\n\n  /**\n   * 清空所有数据\n   */\n  clear(): void {\n    try {\n      Taro.clearStorageSync()\n    } catch (error) {\n      console.error('清空存储失败', error)\n    }\n  }\n\n  /**\n   * 异步存储数据\n   */\n  async setAsync(key: string, data: any): Promise<void> {\n    try {\n      const value = JSON.stringify(data)\n      await Taro.setStorage({ key, data: value })\n    } catch (error) {\n      console.error('异步存储数据失败', key, error)\n    }\n  }\n\n  /**\n   * 异步获取数据\n   */\n  async getAsync<T = any>(key: string): Promise<T | null> {\n    try {\n      const res = await Taro.getStorage({ key })\n      return res.data ? JSON.parse(res.data) : null\n    } catch (error) {\n      return null\n    }\n  }\n\n  /**\n   * 异步删除数据\n   */\n  async removeAsync(key: string): Promise<void> {\n    try {\n      await Taro.removeStorage({ key })\n    } catch (error) {\n      console.error('异步删除数据失败', key, error)\n    }\n  }\n\n  /**\n   * 异步清空所有数据\n   */\n  async clearAsync(): Promise<void> {\n    try {\n      await Taro.clearStorage()\n    } catch (error) {\n      console.error('异步清空存储失败', error)\n    }\n  }\n\n  /**\n   * 获取所有 key\n   */\n  getKeys(): string[] {\n    try {\n      const res = Taro.getStorageInfoSync()\n      return res.keys || []\n    } catch (error) {\n      console.error('获取keys失败', error)\n      return []\n    }\n  }\n\n  /**\n   * 获取存储信息\n   */\n  getInfo() {\n    try {\n      return Taro.getStorageInfoSync()\n    } catch (error) {\n      console.error('获取存储信息失败', error)\n      return null\n    }\n  }\n}\n\nexport default new Storage()\n"],"names":[],"sourceRoot":""}